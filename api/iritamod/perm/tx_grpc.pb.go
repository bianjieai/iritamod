// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: iritamod/perm/tx.proto

package perm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_AssignRoles_FullMethodName     = "/iritamod.perm.Msg/AssignRoles"
	Msg_UnassignRoles_FullMethodName   = "/iritamod.perm.Msg/UnassignRoles"
	Msg_BlockAccount_FullMethodName    = "/iritamod.perm.Msg/BlockAccount"
	Msg_UnblockAccount_FullMethodName  = "/iritamod.perm.Msg/UnblockAccount"
	Msg_BlockContract_FullMethodName   = "/iritamod.perm.Msg/BlockContract"
	Msg_UnblockContract_FullMethodName = "/iritamod.perm.Msg/UnblockContract"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// AssignRoles defines a method for assigning roles for the operator.
	AssignRoles(ctx context.Context, in *MsgAssignRoles, opts ...grpc.CallOption) (*MsgAssignRolesResponse, error)
	// UnassignRoles defines a method for unassigning roles from the operator.
	UnassignRoles(ctx context.Context, in *MsgUnassignRoles, opts ...grpc.CallOption) (*MsgUnassignRolesResponse, error)
	// BlockAccount defines a method for blocking an account
	BlockAccount(ctx context.Context, in *MsgBlockAccount, opts ...grpc.CallOption) (*MsgBlockAccountResponse, error)
	// UnblockAccount defines a method for unblocking a blocked account
	UnblockAccount(ctx context.Context, in *MsgUnblockAccount, opts ...grpc.CallOption) (*MsgUnblockAccountResponse, error)
	// BlockContract defines a method for blocking an contract
	BlockContract(ctx context.Context, in *MsgBlockContract, opts ...grpc.CallOption) (*MsgBlockContractResponse, error)
	// UnblockContract defines a method for unblocking a blocked contract
	UnblockContract(ctx context.Context, in *MsgUnblockContract, opts ...grpc.CallOption) (*MsgUnblockContractResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AssignRoles(ctx context.Context, in *MsgAssignRoles, opts ...grpc.CallOption) (*MsgAssignRolesResponse, error) {
	out := new(MsgAssignRolesResponse)
	err := c.cc.Invoke(ctx, Msg_AssignRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnassignRoles(ctx context.Context, in *MsgUnassignRoles, opts ...grpc.CallOption) (*MsgUnassignRolesResponse, error) {
	out := new(MsgUnassignRolesResponse)
	err := c.cc.Invoke(ctx, Msg_UnassignRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockAccount(ctx context.Context, in *MsgBlockAccount, opts ...grpc.CallOption) (*MsgBlockAccountResponse, error) {
	out := new(MsgBlockAccountResponse)
	err := c.cc.Invoke(ctx, Msg_BlockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockAccount(ctx context.Context, in *MsgUnblockAccount, opts ...grpc.CallOption) (*MsgUnblockAccountResponse, error) {
	out := new(MsgUnblockAccountResponse)
	err := c.cc.Invoke(ctx, Msg_UnblockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockContract(ctx context.Context, in *MsgBlockContract, opts ...grpc.CallOption) (*MsgBlockContractResponse, error) {
	out := new(MsgBlockContractResponse)
	err := c.cc.Invoke(ctx, Msg_BlockContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockContract(ctx context.Context, in *MsgUnblockContract, opts ...grpc.CallOption) (*MsgUnblockContractResponse, error) {
	out := new(MsgUnblockContractResponse)
	err := c.cc.Invoke(ctx, Msg_UnblockContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// AssignRoles defines a method for assigning roles for the operator.
	AssignRoles(context.Context, *MsgAssignRoles) (*MsgAssignRolesResponse, error)
	// UnassignRoles defines a method for unassigning roles from the operator.
	UnassignRoles(context.Context, *MsgUnassignRoles) (*MsgUnassignRolesResponse, error)
	// BlockAccount defines a method for blocking an account
	BlockAccount(context.Context, *MsgBlockAccount) (*MsgBlockAccountResponse, error)
	// UnblockAccount defines a method for unblocking a blocked account
	UnblockAccount(context.Context, *MsgUnblockAccount) (*MsgUnblockAccountResponse, error)
	// BlockContract defines a method for blocking an contract
	BlockContract(context.Context, *MsgBlockContract) (*MsgBlockContractResponse, error)
	// UnblockContract defines a method for unblocking a blocked contract
	UnblockContract(context.Context, *MsgUnblockContract) (*MsgUnblockContractResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) AssignRoles(context.Context, *MsgAssignRoles) (*MsgAssignRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoles not implemented")
}
func (UnimplementedMsgServer) UnassignRoles(context.Context, *MsgUnassignRoles) (*MsgUnassignRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRoles not implemented")
}
func (UnimplementedMsgServer) BlockAccount(context.Context, *MsgBlockAccount) (*MsgBlockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (UnimplementedMsgServer) UnblockAccount(context.Context, *MsgUnblockAccount) (*MsgUnblockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockAccount not implemented")
}
func (UnimplementedMsgServer) BlockContract(context.Context, *MsgBlockContract) (*MsgBlockContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockContract not implemented")
}
func (UnimplementedMsgServer) UnblockContract(context.Context, *MsgUnblockContract) (*MsgUnblockContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockContract not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AssignRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AssignRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignRoles(ctx, req.(*MsgAssignRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnassignRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnassignRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnassignRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnassignRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnassignRoles(ctx, req.(*MsgUnassignRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockAccount(ctx, req.(*MsgBlockAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnblockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockAccount(ctx, req.(*MsgUnblockAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BlockContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockContract(ctx, req.(*MsgBlockContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnblockContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockContract(ctx, req.(*MsgUnblockContract))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.perm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRoles",
			Handler:    _Msg_AssignRoles_Handler,
		},
		{
			MethodName: "UnassignRoles",
			Handler:    _Msg_UnassignRoles_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _Msg_BlockAccount_Handler,
		},
		{
			MethodName: "UnblockAccount",
			Handler:    _Msg_UnblockAccount_Handler,
		},
		{
			MethodName: "BlockContract",
			Handler:    _Msg_BlockContract_Handler,
		},
		{
			MethodName: "UnblockContract",
			Handler:    _Msg_UnblockContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iritamod/perm/tx.proto",
}
