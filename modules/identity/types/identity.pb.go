// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iritamod/identity/identity.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PubKeyAlgorithm defines the algorithm names for the public key
type PubKeyAlgorithm int32

const (
	// UnknownPubKeyAlgorithm defines an unknown algorithm name
	UnknownPubKeyAlgorithm PubKeyAlgorithm = 0
	// RSA defines a RSA algorithm name
	RSA PubKeyAlgorithm = 1
	// DSA defines a DSA algorithm name.
	DSA PubKeyAlgorithm = 2
	// ECDSA defines an ECDSA algorithm name.
	ECDSA PubKeyAlgorithm = 3
	// ED25519 defines an ED25519 algorithm name.
	ED25519 PubKeyAlgorithm = 4
	// SM2 defines an SM2 algorithm name.
	SM2 PubKeyAlgorithm = 5
)

var PubKeyAlgorithm_name = map[int32]string{
	0: "UnknownPubKeyAlgorithm",
	1: "RSA",
	2: "DSA",
	3: "ECDSA",
	4: "ED25519",
	5: "SM2",
}

var PubKeyAlgorithm_value = map[string]int32{
	"UnknownPubKeyAlgorithm": 0,
	"RSA":                    1,
	"DSA":                    2,
	"ECDSA":                  3,
	"ED25519":                4,
	"SM2":                    5,
}

func (PubKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3649877c49d8593, []int{0}
}

// Identity defines a struct for an identity
type Identity struct {
	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PubKeys      []PubKeyInfo `protobuf:"bytes,2,rep,name=pub_keys,json=pubKeys,proto3" json:"pubkeys" yaml:"pubkeys"`
	Certificates []string     `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
	Credentials  string       `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Owner        string       `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Data         string       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3649877c49d8593, []int{0}
}
func (m *Identity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return m.Size()
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

// PubKey represents a public key along with the corresponding algorithm
type PubKeyInfo struct {
	PubKey    string          `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pubkey" yaml:"pubkey"`
	Algorithm PubKeyAlgorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=iritamod.identity.PubKeyAlgorithm" json:"algorithm,omitempty"`
}

func (m *PubKeyInfo) Reset()         { *m = PubKeyInfo{} }
func (m *PubKeyInfo) String() string { return proto.CompactTextString(m) }
func (*PubKeyInfo) ProtoMessage()    {}
func (*PubKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3649877c49d8593, []int{1}
}
func (m *PubKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyInfo.Merge(m, src)
}
func (m *PubKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("iritamod.identity.PubKeyAlgorithm", PubKeyAlgorithm_name, PubKeyAlgorithm_value)
	proto.RegisterType((*Identity)(nil), "iritamod.identity.Identity")
	proto.RegisterType((*PubKeyInfo)(nil), "iritamod.identity.PubKeyInfo")
}

func init() { proto.RegisterFile("iritamod/identity/identity.proto", fileDescriptor_e3649877c49d8593) }

var fileDescriptor_e3649877c49d8593 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0xe5, 0x67, 0x73, 0x29, 0xc1, 0x9c, 0x2a, 0x64, 0x19, 0x71, 0x3e, 0x3c, 0x45, 0x0c,
	0x89, 0x30, 0x2d, 0x12, 0x9d, 0x48, 0x48, 0x87, 0xaa, 0xaa, 0x84, 0x6c, 0xb1, 0xc0, 0x80, 0xec,
	0xf8, 0x9a, 0x1e, 0x8d, 0x7d, 0x91, 0x7d, 0x56, 0xe5, 0xff, 0x00, 0x79, 0xe2, 0x1f, 0x88, 0x84,
	0x44, 0x07, 0x46, 0xfe, 0x01, 0xf6, 0x8c, 0x1d, 0x99, 0x2c, 0x48, 0x16, 0x54, 0x89, 0xa5, 0x7f,
	0x01, 0xb2, 0x9d, 0x34, 0xa5, 0x55, 0xb7, 0xef, 0x7d, 0xdf, 0x77, 0xef, 0xbe, 0xf7, 0xf4, 0x20,
	0x61, 0x01, 0x13, 0xb6, 0xc7, 0xdd, 0x2e, 0x73, 0xa9, 0x2f, 0x98, 0x88, 0xaf, 0x40, 0x67, 0x12,
	0x70, 0xc1, 0xd1, 0x83, 0x95, 0xa3, 0xb3, 0x12, 0xd4, 0xad, 0x11, 0x1f, 0xf1, 0x5c, 0xed, 0x66,
	0xa8, 0x30, 0xea, 0x7f, 0x01, 0xdc, 0xd8, 0x5f, 0x5a, 0x50, 0x0b, 0x96, 0x98, 0xab, 0x00, 0x02,
	0xda, 0x0d, 0xb3, 0xc4, 0x5c, 0xf4, 0x1e, 0x6e, 0x4c, 0x22, 0xe7, 0xc3, 0x09, 0x8d, 0x43, 0xa5,
	0x44, 0xca, 0xed, 0xa6, 0xf1, 0xb8, 0x73, 0xab, 0x71, 0xe7, 0x4d, 0xe4, 0x1c, 0xd0, 0x78, 0xdf,
	0x3f, 0xe2, 0xfd, 0x27, 0xb3, 0x54, 0x93, 0x2e, 0x52, 0xad, 0x3e, 0x89, 0x9c, 0xec, 0xd5, 0x65,
	0xaa, 0xb5, 0x62, 0xdb, 0x1b, 0xef, 0xea, 0x4b, 0x42, 0x37, 0x33, 0xe9, 0x80, 0xc6, 0x21, 0xd2,
	0xe1, 0xe6, 0x90, 0x06, 0x82, 0x1d, 0xb1, 0xa1, 0x2d, 0x68, 0xa8, 0x94, 0x49, 0xb9, 0xdd, 0x30,
	0xff, 0xe3, 0x10, 0x81, 0xcd, 0x61, 0x40, 0xf3, 0x8f, 0xec, 0x71, 0xa8, 0x54, 0xf2, 0x64, 0xd7,
	0x29, 0xb4, 0x05, 0xab, 0xfc, 0xd4, 0xa7, 0x81, 0x52, 0xcd, 0xb5, 0xa2, 0x40, 0x08, 0x56, 0x5c,
	0x5b, 0xd8, 0x4a, 0x2d, 0x27, 0x73, 0xbc, 0x5b, 0xf9, 0xf3, 0x45, 0x03, 0x7a, 0x02, 0x20, 0x5c,
	0x07, 0x46, 0xdb, 0xb0, 0xbe, 0x9c, 0xb0, 0x18, 0xbb, 0xff, 0xe8, 0x22, 0xd5, 0x6a, 0x45, 0xd8,
	0xcb, 0x54, 0xbb, 0x77, 0x3d, 0xbc, 0x6e, 0xd6, 0x8a, 0xec, 0xe8, 0x15, 0x6c, 0xd8, 0xe3, 0x11,
	0x0f, 0x98, 0x38, 0xf6, 0x94, 0x12, 0x01, 0xed, 0x96, 0xa1, 0xdf, 0xb9, 0x98, 0xde, 0xca, 0x69,
	0xae, 0x1f, 0x15, 0x61, 0x9e, 0xfe, 0x00, 0xf0, 0xfe, 0x0d, 0x13, 0x7a, 0x01, 0x1f, 0xbe, 0xf5,
	0x4f, 0x7c, 0x7e, 0xea, 0xdf, 0x50, 0x64, 0x49, 0x55, 0x93, 0x29, 0xb9, 0x43, 0x45, 0x32, 0x2c,
	0x9b, 0x56, 0x4f, 0x06, 0x6a, 0x3d, 0x99, 0x92, 0x0c, 0x66, 0xcc, 0xc0, 0xea, 0xc9, 0xa5, 0x82,
	0x19, 0x58, 0xbd, 0x6c, 0x59, 0x7b, 0xaf, 0x33, 0xae, 0xac, 0x36, 0x92, 0x29, 0x29, 0x0a, 0xa4,
	0xc0, 0xfa, 0xde, 0xc0, 0xd8, 0xd9, 0x79, 0xf6, 0x52, 0xae, 0xa8, 0xcd, 0x64, 0x4a, 0x56, 0x65,
	0xd6, 0xc1, 0x3a, 0x34, 0xe4, 0x6a, 0xd1, 0xc1, 0x3a, 0x34, 0xd4, 0xcd, 0x4f, 0x5f, 0xb1, 0xf4,
	0xed, 0x0c, 0x4b, 0xdf, 0xcf, 0x30, 0xe8, 0x9b, 0xb3, 0xdf, 0x58, 0x9a, 0xcd, 0x31, 0x38, 0x9f,
	0x63, 0xf0, 0x6b, 0x8e, 0xc1, 0xe7, 0x05, 0x96, 0xce, 0x17, 0x58, 0xfa, 0xb9, 0xc0, 0xd2, 0xbb,
	0xed, 0x11, 0x13, 0xc7, 0x91, 0xd3, 0x19, 0x72, 0xaf, 0xeb, 0x30, 0xdb, 0xff, 0xc8, 0xa8, 0xcd,
	0xba, 0x57, 0xa7, 0xeb, 0x71, 0x37, 0x1a, 0xd3, 0x70, 0x7d, 0xc2, 0x22, 0x9e, 0xd0, 0xd0, 0xa9,
	0xe5, 0x77, 0xf9, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xe3, 0xb2, 0x00, 0xe4, 0x02,
	0x00, 0x00,
}

func (x PubKeyAlgorithm) String() string {
	s, ok := PubKeyAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Identity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Identity)
	if !ok {
		that2, ok := that.(Identity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.PubKeys) != len(that1.PubKeys) {
		return false
	}
	for i := range this.PubKeys {
		if !this.PubKeys[i].Equal(&that1.PubKeys[i]) {
			return false
		}
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if this.Certificates[i] != that1.Certificates[i] {
			return false
		}
	}
	if this.Credentials != that1.Credentials {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *PubKeyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKeyInfo)
	if !ok {
		that2, ok := that.(PubKeyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PubKey != that1.PubKey {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	return true
}
func (m *Identity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Identity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Identity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Certificates[iNdEx])
			copy(dAtA[i:], m.Certificates[iNdEx])
			i = encodeVarintIdentity(dAtA, i, uint64(len(m.Certificates[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PubKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdentity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintIdentity(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentity(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Identity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if len(m.PubKeys) > 0 {
		for _, e := range m.PubKeys {
			l = e.Size()
			n += 1 + l + sovIdentity(uint64(l))
		}
	}
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			l = len(s)
			n += 1 + l + sovIdentity(uint64(l))
		}
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	return n
}

func (m *PubKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovIdentity(uint64(m.Algorithm))
	}
	return n
}

func sovIdentity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentity(x uint64) (n int) {
	return sovIdentity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Identity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, PubKeyInfo{})
			if err := m.PubKeys[len(m.PubKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= PubKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentity = fmt.Errorf("proto: unexpected end of group")
)
