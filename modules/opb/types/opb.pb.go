// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iritamod/opb/opb.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the OPB module.
type Params struct {
	BaseTokenDenom            string `protobuf:"bytes,1,opt,name=base_token_denom,json=baseTokenDenom,proto3" json:"base_token_denom,omitempty"`
	PointTokenDenom           string `protobuf:"bytes,2,opt,name=point_token_denom,json=pointTokenDenom,proto3" json:"point_token_denom,omitempty"`
	BaseTokenManager          string `protobuf:"bytes,3,opt,name=base_token_manager,json=baseTokenManager,proto3" json:"base_token_manager,omitempty"`
	UnrestrictedTokenTransfer bool   `protobuf:"varint,4,opt,name=unrestricted_token_transfer,json=unrestrictedTokenTransfer,proto3" json:"unrestricted_token_transfer,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e773c7e0bf186ae9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "iritamod.opb.Params")
}

func init() { proto.RegisterFile("iritamod/opb/opb.proto", fileDescriptor_e773c7e0bf186ae9) }

var fileDescriptor_e773c7e0bf186ae9 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x18, 0x86, 0x73, 0x2a, 0xa5, 0x1e, 0xa2, 0x35, 0x88, 0x44, 0x85, 0x6b, 0x71, 0x0a, 0x22, 0xc9,
	0xe0, 0xe6, 0xe0, 0x20, 0xae, 0x05, 0x29, 0x9d, 0x5c, 0xca, 0x5d, 0xf3, 0x19, 0x4f, 0xbd, 0xfb,
	0xc2, 0xdd, 0x65, 0xf0, 0x5f, 0x38, 0x3a, 0xf6, 0xe7, 0x74, 0xec, 0x24, 0x8e, 0x9a, 0x2c, 0xfe,
	0x0c, 0xc9, 0xb5, 0x96, 0x74, 0x38, 0x38, 0x9e, 0xef, 0x79, 0xdf, 0xe1, 0xa5, 0xc7, 0xd2, 0x48,
	0xc7, 0x15, 0x66, 0x29, 0x16, 0xa2, 0x79, 0x49, 0x61, 0xd0, 0x61, 0xb8, 0xf7, 0xcf, 0x13, 0x2c,
	0xc4, 0xe9, 0x51, 0x8e, 0x39, 0xfa, 0x43, 0xda, 0xfc, 0x96, 0xce, 0xf9, 0x27, 0xa1, 0x9d, 0x7b,
	0x6e, 0xb8, 0xb2, 0x61, 0x4c, 0x7b, 0x82, 0x5b, 0x98, 0x38, 0x7c, 0x01, 0x3d, 0xc9, 0x40, 0xa3,
	0x8a, 0xc8, 0x80, 0xc4, 0xbb, 0xa3, 0xfd, 0x86, 0x8f, 0x1b, 0x7c, 0xd7, 0xd0, 0xf0, 0x82, 0x1e,
	0x16, 0x28, 0xb5, 0xdb, 0x50, 0xb7, 0xbc, 0x7a, 0xe0, 0x0f, 0x2d, 0xf7, 0x92, 0x86, 0xad, 0x56,
	0xc5, 0x35, 0xcf, 0xc1, 0x44, 0xdb, 0x5e, 0xee, 0xad, 0x7b, 0x87, 0x4b, 0x1e, 0xde, 0xd0, 0xb3,
	0x52, 0x1b, 0xb0, 0xce, 0xc8, 0xa9, 0x83, 0x6c, 0x95, 0x72, 0x86, 0x6b, 0xfb, 0x08, 0x26, 0xda,
	0x19, 0x90, 0xb8, 0x3b, 0x3a, 0x69, 0x2b, 0x3e, 0x3e, 0x5e, 0x09, 0xd7, 0xdd, 0x8f, 0x59, 0x3f,
	0xf8, 0x9d, 0xf5, 0xc9, 0xed, 0x70, 0xfe, 0xc3, 0x82, 0x79, 0xc5, 0xc8, 0xa2, 0x62, 0xe4, 0xbb,
	0x62, 0xe4, 0xbd, 0x66, 0xc1, 0xa2, 0x66, 0xc1, 0x57, 0xcd, 0x82, 0x87, 0x34, 0x97, 0xee, 0xa9,
	0x14, 0xc9, 0x14, 0x55, 0x2a, 0x24, 0xd7, 0xcf, 0x12, 0xb8, 0x4c, 0xd7, 0x3b, 0x2a, 0xcc, 0xca,
	0x57, 0xb0, 0x7e, 0x4f, 0xf7, 0x56, 0x80, 0x15, 0x1d, 0x3f, 0xd7, 0xd5, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdd, 0xb2, 0xb8, 0x72, 0x6c, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseTokenDenom != that1.BaseTokenDenom {
		return false
	}
	if this.PointTokenDenom != that1.PointTokenDenom {
		return false
	}
	if this.BaseTokenManager != that1.BaseTokenManager {
		return false
	}
	if this.UnrestrictedTokenTransfer != that1.UnrestrictedTokenTransfer {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnrestrictedTokenTransfer {
		i--
		if m.UnrestrictedTokenTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.BaseTokenManager) > 0 {
		i -= len(m.BaseTokenManager)
		copy(dAtA[i:], m.BaseTokenManager)
		i = encodeVarintOpb(dAtA, i, uint64(len(m.BaseTokenManager)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PointTokenDenom) > 0 {
		i -= len(m.PointTokenDenom)
		copy(dAtA[i:], m.PointTokenDenom)
		i = encodeVarintOpb(dAtA, i, uint64(len(m.PointTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseTokenDenom) > 0 {
		i -= len(m.BaseTokenDenom)
		copy(dAtA[i:], m.BaseTokenDenom)
		i = encodeVarintOpb(dAtA, i, uint64(len(m.BaseTokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseTokenDenom)
	if l > 0 {
		n += 1 + l + sovOpb(uint64(l))
	}
	l = len(m.PointTokenDenom)
	if l > 0 {
		n += 1 + l + sovOpb(uint64(l))
	}
	l = len(m.BaseTokenManager)
	if l > 0 {
		n += 1 + l + sovOpb(uint64(l))
	}
	if m.UnrestrictedTokenTransfer {
		n += 2
	}
	return n
}

func sovOpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpb(x uint64) (n int) {
	return sovOpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PointTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrestrictedTokenTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnrestrictedTokenTransfer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpb = fmt.Errorf("proto: unexpected end of group")
)
