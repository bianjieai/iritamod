// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iritamod/perm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRolesRequest is request type for the Query/Roles RPC method
type QueryRolesRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRolesRequest) Reset()         { *m = QueryRolesRequest{} }
func (m *QueryRolesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRolesRequest) ProtoMessage()    {}
func (*QueryRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{0}
}
func (m *QueryRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRolesRequest.Merge(m, src)
}
func (m *QueryRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRolesRequest proto.InternalMessageInfo

func (m *QueryRolesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryRolesResponse is response type for the Query/Roles RPC method
type QueryRolesResponse struct {
	Roles []Role `protobuf:"varint,1,rep,packed,name=roles,proto3,enum=iritamod.perm.Role" json:"roles,omitempty"`
}

func (m *QueryRolesResponse) Reset()         { *m = QueryRolesResponse{} }
func (m *QueryRolesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRolesResponse) ProtoMessage()    {}
func (*QueryRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{1}
}
func (m *QueryRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRolesResponse.Merge(m, src)
}
func (m *QueryRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRolesResponse proto.InternalMessageInfo

func (m *QueryRolesResponse) GetRoles() []Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

// QueryBlacklistRequest is request type for the Query/Blacklist RPC method
type QueryBlockListRequest struct {
}

func (m *QueryBlockListRequest) Reset()         { *m = QueryBlockListRequest{} }
func (m *QueryBlockListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockListRequest) ProtoMessage()    {}
func (*QueryBlockListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{2}
}
func (m *QueryBlockListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockListRequest.Merge(m, src)
}
func (m *QueryBlockListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockListRequest proto.InternalMessageInfo

// QueryBlacklistResponse is response type for the Query/Blacklist RPC method
type QueryBlockListResponse struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryBlockListResponse) Reset()         { *m = QueryBlockListResponse{} }
func (m *QueryBlockListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockListResponse) ProtoMessage()    {}
func (*QueryBlockListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{3}
}
func (m *QueryBlockListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockListResponse.Merge(m, src)
}
func (m *QueryBlockListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockListResponse proto.InternalMessageInfo

func (m *QueryBlockListResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// QueryBlacklistRequest is request type for the Query/Blacklist RPC method
type QueryContractDenyList struct {
}

func (m *QueryContractDenyList) Reset()         { *m = QueryContractDenyList{} }
func (m *QueryContractDenyList) String() string { return proto.CompactTextString(m) }
func (*QueryContractDenyList) ProtoMessage()    {}
func (*QueryContractDenyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{4}
}
func (m *QueryContractDenyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractDenyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractDenyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractDenyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractDenyList.Merge(m, src)
}
func (m *QueryContractDenyList) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractDenyList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractDenyList.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractDenyList proto.InternalMessageInfo

// QueryBlacklistResponse is response type for the Query/Blacklist RPC method
type QueryContractDenyListResponse struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryContractDenyListResponse) Reset()         { *m = QueryContractDenyListResponse{} }
func (m *QueryContractDenyListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractDenyListResponse) ProtoMessage()    {}
func (*QueryContractDenyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cbfba0d36ca7d4e, []int{5}
}
func (m *QueryContractDenyListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractDenyListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractDenyListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractDenyListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractDenyListResponse.Merge(m, src)
}
func (m *QueryContractDenyListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractDenyListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractDenyListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractDenyListResponse proto.InternalMessageInfo

func (m *QueryContractDenyListResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRolesRequest)(nil), "iritamod.perm.QueryRolesRequest")
	proto.RegisterType((*QueryRolesResponse)(nil), "iritamod.perm.QueryRolesResponse")
	proto.RegisterType((*QueryBlockListRequest)(nil), "iritamod.perm.QueryBlockListRequest")
	proto.RegisterType((*QueryBlockListResponse)(nil), "iritamod.perm.QueryBlockListResponse")
	proto.RegisterType((*QueryContractDenyList)(nil), "iritamod.perm.QueryContractDenyList")
	proto.RegisterType((*QueryContractDenyListResponse)(nil), "iritamod.perm.QueryContractDenyListResponse")
}

func init() { proto.RegisterFile("iritamod/perm/query.proto", fileDescriptor_2cbfba0d36ca7d4e) }

var fileDescriptor_2cbfba0d36ca7d4e = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x13, 0xa5, 0x4a, 0x07, 0x94, 0xba, 0xa2, 0xc6, 0xa0, 0xa1, 0x06, 0x85, 0x0a, 0x9a,
	0x48, 0x05, 0x6f, 0x22, 0x56, 0x4f, 0x22, 0x82, 0x39, 0x7a, 0xdb, 0x26, 0x8b, 0x5d, 0x6d, 0xb2,
	0xe9, 0xee, 0xe6, 0xd0, 0xb7, 0xf0, 0x21, 0x7c, 0x18, 0x8f, 0x3d, 0x7a, 0x94, 0xf6, 0x45, 0x64,
	0x93, 0x34, 0xb5, 0x31, 0x68, 0x2f, 0x81, 0xec, 0x7c, 0x33, 0x1f, 0xff, 0x30, 0xb0, 0x4b, 0x39,
	0x95, 0x38, 0x64, 0x81, 0x1b, 0x13, 0x1e, 0xba, 0x83, 0x84, 0xf0, 0xa1, 0x13, 0x73, 0x26, 0x19,
	0x5a, 0x9b, 0x96, 0x1c, 0x55, 0x32, 0x8d, 0x79, 0x52, 0x7d, 0x32, 0xd0, 0x3e, 0x85, 0x8d, 0x47,
	0xd5, 0xe7, 0xb1, 0x3e, 0x11, 0x1e, 0x19, 0x24, 0x44, 0x48, 0x64, 0xc0, 0x2a, 0x0e, 0x02, 0x4e,
	0x84, 0x30, 0xf4, 0xa6, 0xde, 0xaa, 0x7b, 0xd3, 0x5f, 0xfb, 0x0a, 0xd0, 0x4f, 0x5c, 0xc4, 0x2c,
	0x12, 0x04, 0x1d, 0x43, 0x8d, 0xab, 0x07, 0x43, 0x6f, 0x2e, 0xb7, 0xd6, 0xdb, 0x9b, 0xce, 0x9c,
	0xdd, 0x51, 0xb0, 0x97, 0x11, 0xf6, 0x0e, 0x6c, 0xa5, 0x03, 0x3a, 0x7d, 0xe6, 0xbf, 0xde, 0x53,
	0x21, 0x73, 0xa7, 0x7d, 0x01, 0xdb, 0xe5, 0x42, 0x3e, 0x7d, 0x0f, 0xea, 0xb9, 0x3e, 0x37, 0xd4,
	0xbd, 0xd9, 0x43, 0x31, 0xf0, 0x86, 0x45, 0x92, 0x63, 0x5f, 0xde, 0x92, 0x68, 0xa8, 0xda, 0xed,
	0x4b, 0xd8, 0xaf, 0x2c, 0x2c, 0x36, 0xb7, 0xfd, 0xbe, 0x04, 0xb5, 0xb4, 0x1f, 0x3d, 0x40, 0x2d,
	0x8d, 0x8b, 0x9a, 0xa5, 0x5c, 0xbf, 0x16, 0x67, 0x1e, 0xfc, 0x41, 0x64, 0x56, 0x5b, 0x43, 0x18,
	0x1a, 0xd7, 0xbe, 0xcf, 0x92, 0x48, 0x16, 0x59, 0xd1, 0x61, 0x55, 0x63, 0x79, 0x47, 0xe6, 0xd1,
	0x3f, 0x54, 0xa1, 0xe8, 0x41, 0xa3, 0x1c, 0xbb, 0x5a, 0x51, 0xa6, 0xcc, 0x93, 0x45, 0xa8, 0x99,
	0xa9, 0x73, 0xf7, 0x31, 0xb6, 0xf4, 0xd1, 0xd8, 0xd2, 0xbf, 0xc6, 0x96, 0xfe, 0x36, 0xb1, 0xb4,
	0xd1, 0xc4, 0xd2, 0x3e, 0x27, 0x96, 0xf6, 0x74, 0xf6, 0x4c, 0x65, 0x2f, 0xe9, 0x3a, 0x3e, 0x0b,
	0xdd, 0x2e, 0xc5, 0xd1, 0x0b, 0x25, 0x98, 0xba, 0xc5, 0x21, 0x86, 0x2c, 0x48, 0xfa, 0x44, 0x64,
	0x07, 0x29, 0x87, 0x31, 0x11, 0xdd, 0x95, 0xf4, 0x24, 0xcf, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xe8, 0xcc, 0xde, 0x72, 0xd8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Roles queries the roles of a given address
	Roles(ctx context.Context, in *QueryRolesRequest, opts ...grpc.CallOption) (*QueryRolesResponse, error)
	// Blacklist queries the black list
	AccountBlockList(ctx context.Context, in *QueryBlockListRequest, opts ...grpc.CallOption) (*QueryBlockListResponse, error)
	// ContractDenyList queries the contract deny list
	ContractDenyList(ctx context.Context, in *QueryContractDenyList, opts ...grpc.CallOption) (*QueryContractDenyListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Roles(ctx context.Context, in *QueryRolesRequest, opts ...grpc.CallOption) (*QueryRolesResponse, error) {
	out := new(QueryRolesResponse)
	err := c.cc.Invoke(ctx, "/iritamod.perm.Query/Roles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountBlockList(ctx context.Context, in *QueryBlockListRequest, opts ...grpc.CallOption) (*QueryBlockListResponse, error) {
	out := new(QueryBlockListResponse)
	err := c.cc.Invoke(ctx, "/iritamod.perm.Query/AccountBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractDenyList(ctx context.Context, in *QueryContractDenyList, opts ...grpc.CallOption) (*QueryContractDenyListResponse, error) {
	out := new(QueryContractDenyListResponse)
	err := c.cc.Invoke(ctx, "/iritamod.perm.Query/ContractDenyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Roles queries the roles of a given address
	Roles(context.Context, *QueryRolesRequest) (*QueryRolesResponse, error)
	// Blacklist queries the black list
	AccountBlockList(context.Context, *QueryBlockListRequest) (*QueryBlockListResponse, error)
	// ContractDenyList queries the contract deny list
	ContractDenyList(context.Context, *QueryContractDenyList) (*QueryContractDenyListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Roles(ctx context.Context, req *QueryRolesRequest) (*QueryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roles not implemented")
}
func (*UnimplementedQueryServer) AccountBlockList(ctx context.Context, req *QueryBlockListRequest) (*QueryBlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountBlockList not implemented")
}
func (*UnimplementedQueryServer) ContractDenyList(ctx context.Context, req *QueryContractDenyList) (*QueryContractDenyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractDenyList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Roles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Roles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.perm.Query/Roles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Roles(ctx, req.(*QueryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.perm.Query/AccountBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountBlockList(ctx, req.(*QueryBlockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractDenyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractDenyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractDenyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.perm.Query/ContractDenyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractDenyList(ctx, req.(*QueryContractDenyList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.perm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Roles",
			Handler:    _Query_Roles_Handler,
		},
		{
			MethodName: "AccountBlockList",
			Handler:    _Query_AccountBlockList_Handler,
		},
		{
			MethodName: "ContractDenyList",
			Handler:    _Query_ContractDenyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iritamod/perm/query.proto",
}

func (m *QueryRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBlockListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractDenyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractDenyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractDenyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryContractDenyListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractDenyListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractDenyListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryBlockListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBlockListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryContractDenyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryContractDenyListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Role
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Role(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]Role, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Role
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Role(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractDenyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractDenyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractDenyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractDenyListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractDenyListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractDenyListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
