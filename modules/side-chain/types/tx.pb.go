// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iritamod/side-chain/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateSpace defines the Msg/CreateSpace request type.
type MsgCreateSpace struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri    string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateSpace) Reset()         { *m = MsgCreateSpace{} }
func (m *MsgCreateSpace) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSpace) ProtoMessage()    {}
func (*MsgCreateSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{0}
}
func (m *MsgCreateSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSpace.Merge(m, src)
}
func (m *MsgCreateSpace) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSpace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSpace proto.InternalMessageInfo

func (m *MsgCreateSpace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateSpace) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgCreateSpace) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateSpaceResponse defines the Msg/CreateSpace response type.
type MsgCreateSpaceResponse struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (m *MsgCreateSpaceResponse) Reset()         { *m = MsgCreateSpaceResponse{} }
func (m *MsgCreateSpaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSpaceResponse) ProtoMessage()    {}
func (*MsgCreateSpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{1}
}
func (m *MsgCreateSpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSpaceResponse.Merge(m, src)
}
func (m *MsgCreateSpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSpaceResponse proto.InternalMessageInfo

func (m *MsgCreateSpaceResponse) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

// MsgTransferSpace defines the Msg/TransferSpace request type.
type MsgTransferSpace struct {
	SpaceId   uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender    string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTransferSpace) Reset()         { *m = MsgTransferSpace{} }
func (m *MsgTransferSpace) String() string { return proto.CompactTextString(m) }
func (*MsgTransferSpace) ProtoMessage()    {}
func (*MsgTransferSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{2}
}
func (m *MsgTransferSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferSpace.Merge(m, src)
}
func (m *MsgTransferSpace) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferSpace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferSpace proto.InternalMessageInfo

func (m *MsgTransferSpace) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgTransferSpace) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgTransferSpace) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgTransferSpaceResponse defines the Msg/TransferSpace response type.
type MsgTransferSpaceResponse struct {
}

func (m *MsgTransferSpaceResponse) Reset()         { *m = MsgTransferSpaceResponse{} }
func (m *MsgTransferSpaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferSpaceResponse) ProtoMessage()    {}
func (*MsgTransferSpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{3}
}
func (m *MsgTransferSpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferSpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferSpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferSpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferSpaceResponse.Merge(m, src)
}
func (m *MsgTransferSpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferSpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferSpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferSpaceResponse proto.InternalMessageInfo

// MsgCreateBlockHeader defines the Msg/CreateBlockHeader request type.
type MsgCreateBlockHeader struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Header  string `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Sender  string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateBlockHeader) Reset()         { *m = MsgCreateBlockHeader{} }
func (m *MsgCreateBlockHeader) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBlockHeader) ProtoMessage()    {}
func (*MsgCreateBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{4}
}
func (m *MsgCreateBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBlockHeader.Merge(m, src)
}
func (m *MsgCreateBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBlockHeader proto.InternalMessageInfo

func (m *MsgCreateBlockHeader) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *MsgCreateBlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgCreateBlockHeader) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *MsgCreateBlockHeader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCreateBlockHeaderResponse defines the Msg/CreateBlockHeader response type.
type MsgCreateBlockHeaderResponse struct {
}

func (m *MsgCreateBlockHeaderResponse) Reset()         { *m = MsgCreateBlockHeaderResponse{} }
func (m *MsgCreateBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBlockHeaderResponse) ProtoMessage()    {}
func (*MsgCreateBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b052556b99f3894e, []int{5}
}
func (m *MsgCreateBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBlockHeaderResponse.Merge(m, src)
}
func (m *MsgCreateBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBlockHeaderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateSpace)(nil), "iritamod.side_chain.v1.MsgCreateSpace")
	proto.RegisterType((*MsgCreateSpaceResponse)(nil), "iritamod.side_chain.v1.MsgCreateSpaceResponse")
	proto.RegisterType((*MsgTransferSpace)(nil), "iritamod.side_chain.v1.MsgTransferSpace")
	proto.RegisterType((*MsgTransferSpaceResponse)(nil), "iritamod.side_chain.v1.MsgTransferSpaceResponse")
	proto.RegisterType((*MsgCreateBlockHeader)(nil), "iritamod.side_chain.v1.MsgCreateBlockHeader")
	proto.RegisterType((*MsgCreateBlockHeaderResponse)(nil), "iritamod.side_chain.v1.MsgCreateBlockHeaderResponse")
}

func init() { proto.RegisterFile("iritamod/side-chain/v1/tx.proto", fileDescriptor_b052556b99f3894e) }

var fileDescriptor_b052556b99f3894e = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xe3, 0x26, 0x0a, 0xf4, 0x55, 0xa0, 0x62, 0x45, 0xc1, 0xb5, 0x2a, 0x83, 0x32, 0x40,
	0x85, 0xa8, 0xdd, 0x52, 0xc4, 0xc0, 0x46, 0x58, 0x60, 0x88, 0x84, 0x5c, 0x26, 0x96, 0xe8, 0xe2,
	0x7b, 0x5c, 0x8e, 0xd6, 0x3e, 0xeb, 0x9e, 0x53, 0x60, 0x65, 0x64, 0xe2, 0x23, 0xf0, 0x11, 0x18,
	0xf8, 0x10, 0x8c, 0x55, 0x27, 0x46, 0x94, 0x0c, 0x7c, 0x0d, 0x64, 0xfb, 0xe2, 0xc6, 0xd0, 0x96,
	0x40, 0xb7, 0xfb, 0xff, 0xdf, 0x3f, 0x7e, 0xbf, 0xa7, 0x77, 0x39, 0xb8, 0x25, 0xb5, 0xcc, 0x58,
	0xac, 0x78, 0x40, 0x92, 0xe3, 0x76, 0x34, 0x66, 0x32, 0x09, 0x8e, 0x76, 0x83, 0xec, 0x9d, 0x9f,
	0x6a, 0x95, 0x29, 0xbb, 0x3b, 0x0f, 0xf8, 0x79, 0x60, 0x58, 0x04, 0xfc, 0xa3, 0x5d, 0xf7, 0xee,
	0x39, 0x3f, 0x3c, 0x55, 0xe5, 0x07, 0xdc, 0x9b, 0x91, 0xa2, 0x58, 0x51, 0x10, 0x93, 0xc8, 0xeb,
	0x31, 0x09, 0x53, 0xd8, 0x28, 0x0b, 0xc3, 0x42, 0x05, 0xa5, 0x30, 0xa5, 0x8e, 0x50, 0x42, 0x95,
	0x7e, 0x7e, 0x2a, 0xdd, 0xde, 0x04, 0xae, 0x0f, 0x48, 0x3c, 0xd5, 0xc8, 0x32, 0xdc, 0x4f, 0x59,
	0x84, 0xb6, 0x0d, 0xad, 0x84, 0xc5, 0xe8, 0x58, 0xb7, 0xad, 0xad, 0xd5, 0xb0, 0x38, 0xdb, 0xeb,
	0xd0, 0x9c, 0x68, 0xe9, 0xac, 0x14, 0x56, 0x7e, 0xb4, 0x77, 0xa0, 0x4d, 0x98, 0x70, 0xd4, 0x4e,
	0x33, 0x37, 0xfb, 0xce, 0xc9, 0xd7, 0xed, 0x8e, 0xe9, 0xf7, 0x84, 0x73, 0x8d, 0x44, 0xfb, 0x99,
	0x96, 0x89, 0x08, 0x4d, 0xee, 0xf1, 0xda, 0x87, 0x9f, 0x5f, 0xee, 0x19, 0xd1, 0xdb, 0x83, 0x6e,
	0xbd, 0x6d, 0x88, 0x94, 0xaa, 0x84, 0xd0, 0xde, 0x80, 0xab, 0x94, 0x1b, 0x43, 0xc9, 0x0b, 0x84,
	0x56, 0x78, 0xa5, 0xd0, 0xcf, 0x79, 0xef, 0xa3, 0x05, 0xeb, 0x03, 0x12, 0x2f, 0x35, 0x4b, 0xe8,
	0x35, 0xea, 0x12, 0xf7, 0xfc, 0xbc, 0xbd, 0x09, 0xab, 0x1a, 0x23, 0x99, 0x4a, 0x4c, 0x32, 0xc3,
	0x7e, 0x6a, 0x5c, 0x76, 0x02, 0x17, 0x9c, 0xdf, 0x59, 0xe6, 0x33, 0xf4, 0x3e, 0x5b, 0xd0, 0xa9,
	0xc6, 0xeb, 0x1f, 0xaa, 0xe8, 0xe0, 0x19, 0x32, 0x8e, 0xfa, 0x22, 0xd8, 0x2e, 0xb4, 0xc7, 0x28,
	0xc5, 0xb8, 0x24, 0x6d, 0x85, 0x46, 0x95, 0x3e, 0xab, 0x30, 0x43, 0xa3, 0x16, 0xf0, 0x5b, 0xff,
	0x83, 0xef, 0xc1, 0xe6, 0x59, 0x84, 0xf3, 0x11, 0x1e, 0x9c, 0xac, 0x40, 0x73, 0x40, 0xc2, 0x46,
	0x58, 0x5b, 0xbc, 0x1c, 0x77, 0xfc, 0xb3, 0xaf, 0xae, 0x5f, 0xdf, 0xa6, 0xeb, 0x2f, 0x97, 0xab,
	0xb6, 0x7e, 0x00, 0xd7, 0xea, 0x6b, 0xdd, 0xba, 0xe0, 0x03, 0xb5, 0xa4, 0xbb, 0xb3, 0x6c, 0xb2,
	0x6a, 0xf6, 0x16, 0x6e, 0xfc, 0xb9, 0x9a, 0xfb, 0x7f, 0x25, 0x5e, 0x48, 0xbb, 0x0f, 0xff, 0x25,
	0x3d, 0x6f, 0xdc, 0x7f, 0xf1, 0x6d, 0xea, 0x59, 0xc7, 0x53, 0xcf, 0xfa, 0x31, 0xf5, 0xac, 0x4f,
	0x33, 0xaf, 0x71, 0x3c, 0xf3, 0x1a, 0xdf, 0x67, 0x5e, 0xe3, 0xd5, 0x23, 0x21, 0xb3, 0xf1, 0x64,
	0xe4, 0x47, 0x2a, 0x0e, 0x46, 0x92, 0x25, 0x6f, 0x24, 0x32, 0x19, 0x54, 0xcf, 0x41, 0xac, 0xf8,
	0xe4, 0x10, 0x69, 0xf1, 0x59, 0xc8, 0xde, 0xa7, 0x48, 0xa3, 0x76, 0xf1, 0x2f, 0xde, 0xfb, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xe0, 0x2f, 0x65, 0xe0, 0x73, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateSpace defines a method for creating a space
	CreateSpace(ctx context.Context, in *MsgCreateSpace, opts ...grpc.CallOption) (*MsgCreateSpaceResponse, error)
	// TransferSpace defines a method for transferring a space
	TransferSpace(ctx context.Context, in *MsgTransferSpace, opts ...grpc.CallOption) (*MsgTransferSpaceResponse, error)
	// CreateBlockHeader defines a method for creating a record
	CreateBlockHeader(ctx context.Context, in *MsgCreateBlockHeader, opts ...grpc.CallOption) (*MsgCreateBlockHeaderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSpace(ctx context.Context, in *MsgCreateSpace, opts ...grpc.CallOption) (*MsgCreateSpaceResponse, error) {
	out := new(MsgCreateSpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Msg/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferSpace(ctx context.Context, in *MsgTransferSpace, opts ...grpc.CallOption) (*MsgTransferSpaceResponse, error) {
	out := new(MsgTransferSpaceResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Msg/TransferSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBlockHeader(ctx context.Context, in *MsgCreateBlockHeader, opts ...grpc.CallOption) (*MsgCreateBlockHeaderResponse, error) {
	out := new(MsgCreateBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/iritamod.side_chain.v1.Msg/CreateBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateSpace defines a method for creating a space
	CreateSpace(context.Context, *MsgCreateSpace) (*MsgCreateSpaceResponse, error)
	// TransferSpace defines a method for transferring a space
	TransferSpace(context.Context, *MsgTransferSpace) (*MsgTransferSpaceResponse, error)
	// CreateBlockHeader defines a method for creating a record
	CreateBlockHeader(context.Context, *MsgCreateBlockHeader) (*MsgCreateBlockHeaderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateSpace(ctx context.Context, req *MsgCreateSpace) (*MsgCreateSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (*UnimplementedMsgServer) TransferSpace(ctx context.Context, req *MsgTransferSpace) (*MsgTransferSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSpace not implemented")
}
func (*UnimplementedMsgServer) CreateBlockHeader(ctx context.Context, req *MsgCreateBlockHeader) (*MsgCreateBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockHeader not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Msg/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSpace(ctx, req.(*MsgCreateSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Msg/TransferSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferSpace(ctx, req.(*MsgTransferSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iritamod.side_chain.v1.Msg/CreateBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBlockHeader(ctx, req.(*MsgCreateBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iritamod.side_chain.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _Msg_CreateSpace_Handler,
		},
		{
			MethodName: "TransferSpace",
			Handler:    _Msg_TransferSpace_Handler,
		},
		{
			MethodName: "CreateBlockHeader",
			Handler:    _Msg_CreateBlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iritamod/side-chain/v1/tx.proto",
}

func (m *MsgCreateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferSpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	return n
}

func (m *MsgTransferSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferSpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovTx(uint64(m.SpaceId))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
