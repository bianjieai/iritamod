syntax = "proto3";
package iritamod.nft1155;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nft1155/nft1155.proto";
import "cosmos/query/pagination.proto";

option go_package = "github.com/bianjieai/iritamod/modules/nft1155/types";

// Query defines the gRPC querier service for NFT module
service Query {
  // Supply queries the total supply of a given denom or owner
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get = "/iritamod/nft1155/collections/{token_id}/supply";
  }

  // Owner queries the NFTs of the specified owner
  rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
    option (google.api.http).get = "/iritamod/nft1155/nfts";
  }

  // Token queries the NFTs of the specified denom
  rpc Token(QueryTokenRequest) returns (QueryTokenResponse) {
    option (google.api.http).get = "/iritamod/nft1155/Tokens/{token_id}";
  }
}

// QuerySupplyRequest is the request type for the Query/HTLC RPC method
message QuerySupplyRequest {
  string token_id = 1 [(gogoproto.moretags) = "yaml:\"token_id\""];
  string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
  uint64 amount = 1;
}

// QueryOwnerRequest is the request type for the Query/Owner RPC method
message QueryOwnerRequest {
  string token_id = 1 [(gogoproto.moretags) = "yaml:\"token_id\""];
  string owner = 2 [(gogoproto.moretags) = "yaml:\"owner\""];
  // pagination defines an optional pagination for the request.
  cosmos.query.PageRequest pagination = 3;
}

// QueryOwnerResponse is the response type for the Query/Owner RPC method
message QueryOwnerResponse {
  Owner owner = 1;
  cosmos.query.PageResponse pagination = 2;
}

// QueryTokenRequest is the request type for the Query/Token RPC method
message QueryTokenRequest {
  string token_id = 1 [(gogoproto.moretags) = "yaml:\"token_id\""];
  // pagination defines an optional pagination for the request.
  cosmos.query.PageRequest pagination = 2;
}

// QueryTokenResponse is the response type for the Query/Token RPC method
message QueryTokenResponse {
  Token token = 1;
  cosmos.query.PageResponse pagination = 2;
}
