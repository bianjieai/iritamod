syntax = "proto3";
package iritamod.nft1155;

import "gogoproto/gogo.proto";

option go_package = "github.com/bianjieai/iritamod/modules/nft1155/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Token Msg service.
service Msg {
  // IssueToken defines a method for issue a Token.
  rpc IssueToken(MsgIssueToken) returns (MsgIssueTokenResponse);

  // MintToken defines a method for mint a new Token
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  // BurnToken defines a method for burning a Token.
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);

  // TransferToken defines a method for transferring a Token.
  rpc TransferToken(MsgTransferToken) returns (MsgTransferTokenResponse);
}

// MsgIssueToken defines an SDK message for creating a new Token.
message MsgIssueToken {
  option (gogoproto.equal) = true;

  string id = 1;
  string owner = 2;
  uint64 max_supply = 3;
  bytes metadata = 4;
}

// MsgIssueTokenResponse defines the Msg/IssueToken response type.
message MsgIssueTokenResponse {}


// MsgMintToken defines an SDK message for creating a new Token.
message MsgMintToken {
  option (gogoproto.equal) = true;

  string id = 1;
  string owner = 2;   //owner = sender
  string recipient = 3;
  uint64 amount = 4;
}

// MsgMintTokenResponse defines the Msg/MintToken response type.
message MsgMintTokenResponse {}


// MsgBurnToken defines an SDK message for burning a Token.
message MsgBurnToken {
  option (gogoproto.equal) = true;

  string id = 1;
  uint64 amount = 2;
  string sender = 3;
}

// MsgBurnTokenResponse defines the Msg/BurnToken response type.
message MsgBurnTokenResponse {}


// MsgTransferToken defines an SDK message for transferring an Token to recipient.
message MsgTransferToken {
  option (gogoproto.equal) = true;
  string sender = 1;
  string recipient = 2;
  string token_id = 3;
  string amount = 4;
  bytes metadata = 5;
}

// MsgTransferTokenResponse defines the Msg/TransferToken response type.
message MsgTransferTokenResponse {}
