syntax = "proto3";
package iritamod.upgrade;

option go_package = "github.com/bianjieai/iritamod/modules/upgrade/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// Msg defines the ibc Msg service.
service Msg {
  // CreateClient defines a method for creating a light client.
  rpc UpgradeSoftware(MsgUpgradeSoftware) returns(MsgUpgradeSoftwareResponse);

  // CancelUpgrade defines a method for updating a light client state.
  rpc CancelUpgrade(MsgCancelUpgrade) returns(MsgCancelUpgradeResponse);
}

// MsgUpgradeSoftware - struct for upgrade software
message MsgUpgradeSoftware {
  option(gogoproto.equal) = true;

  string name = 1;

  // The time after which the upgrade must be performed.
  // Leave set to its zero value to use a pre-defined Height instead.
  google.protobuf.Timestamp time =
      2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // The height at which the upgrade must be performed.
  // Only used if Time is not set.
  int64 height = 3;

  // Any application specific upgrade info to be included on-chain
  // such as a git commit that validators could automatically upgrade to
  string info = 4;
  string operator= 5;
}

// MsgUpgradeSoftwareResponse defines the Msg/UpgradeSoftware response type.
message MsgUpgradeSoftwareResponse {}

// MsgCancelUpgrade - struct for cancel software upgrade
message MsgCancelUpgrade { string operator= 1; }

// MsgCancelUpgradeResponse defines the Msg/CancelUpgrade response type.
message MsgCancelUpgradeResponse {}